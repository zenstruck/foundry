name: CI

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 1,16 * *'

jobs:
  tests:
    name: PHP ${{ matrix.php }}, SF ${{ matrix.symfony }} - ${{ matrix.deps }} ${{ matrix.use-orm == '1' && '- ORM' || '' }} ${{ matrix.use-odm == '1' && '- ODM' || '' }} ${{ matrix.use-dama == '1' && '- DAMA' || '' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: [8.0, 8.1]
        symfony: [4.4.*, 5.4.*, 6.0.*, 6.1.*, 6.2.*]
        deps: [highest]
        use-orm: [1]
        use-odm: [1]
        use-dama: [1]
        exclude:
          - {use-orm: 0, use-odm: 0} # tested directly in a test case
          - {use-orm: 0, use-dama: 1} # cannot happen
          # conflicts
          - {php: 8.0, symfony: 6.1.*}
          - {php: 8.0, symfony: 6.2.*}
        include:
          - {php: 8.0, symfony: 4.4.*, use-orm: 1, use-odm: 0, use-dama: 0, deps: lowest}
          - {php: 8.0, symfony: 4.4.*, use-orm: 1, use-odm: 1, use-dama: 0, deps: lowest}
          - {php: 8.0, symfony: 4.4.*, use-orm: 0, use-odm: 1, use-dama: 0, deps: lowest}
          - {php: 8.1, symfony: 6.1.*, use-orm: 1, use-odm: 0, use-dama: 0, deps: highest}
          - {php: 8.1, symfony: 6.1.*, use-orm: 1, use-odm: 1, use-dama: 0, deps: highest}
          - {php: 8.1, symfony: 6.1.*, use-orm: 1, use-odm: 0, use-dama: 1, deps: highest}
          - {php: 8.1, symfony: 6.1.*, use-orm: 0, use-odm: 1, use-dama: 0, deps: highest}

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: 1234
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      mongo:
        image: mongo:4
        ports:
          - 27017:27017

    env:
      DATABASE_URL: mysql://root:1234@127.0.0.1:3306/zenstruck_foundry?serverVersion=5.7
      MONGO_URL: mongodb://127.0.0.1:27017/dbName?compressors=disabled&amp;gssapiServiceName=mongodb

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify MySQL version
        run: mysql --host 127.0.0.1 -uroot -p1234 -e "STATUS"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: pgsql, sqlite, mongodb
          coverage: none
          tools: flex

      - name: Install dependencies
        uses: ramsey/composer-install@v2
        with:
          dependency-versions: ${{ matrix.deps }}
          composer-options: --prefer-dist
        env:
          SYMFONY_REQUIRE: ${{ matrix.symfony }}

      - name: 'Test'
        run: |
          if [ "${{ matrix.use-dama }}" == "1" ]; then
            CONFIGURATION="--configuration phpunit-dama-doctrine.xml.dist"
          fi

          vendor/bin/simple-phpunit -v ${CONFIGURATION}
        env:
          USE_ORM: ${{ matrix.use-orm }}
          USE_ODM: ${{ matrix.use-odm }}
          USE_FOUNDRY_BUNDLE: 1

  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: 1234
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      mongo:
        image: mongo:4
        ports:
          - 27017:27017

    env:
      DATABASE_URL: mysql://root:1234@127.0.0.1:3306/zenstruck_foundry?serverVersion=5.7
      MONGO_URL: mongodb://127.0.0.1:27017/dbName?compressors=disabled&amp;gssapiServiceName=mongodb

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify MySQL version
        run: mysql --host 127.0.0.1 -uroot -p1234 -e "STATUS"

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0
          extensions: pgsql, sqlite
          coverage: xdebug
          ini-values: xdebug.mode=coverage

      - name: Install dependencies
        uses: ramsey/composer-install@v2
        with:
          composer-options: --prefer-dist
          dependency-versions: "highest"

      - name: 'Coverage'
        run: vendor/bin/simple-phpunit -v --configuration phpunit-dama-doctrine.xml.dist --coverage-text --coverage-clover=foundry.clover
        env:
          USE_ORM: 1
          USE_ODM: 1
          USE_FOUNDRY_BUNDLE: 1

      - name: Publish coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./*.clover

  composer-validate:
    uses: zenstruck/.github/.github/workflows/php-composer-validate.yml@main

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0
          coverage: none

      - name: Install dependencies
        uses: ramsey/composer-install@v2
        with:
          composer-options: --prefer-dist

      - name: Build docs
        run: bin/build-docs

  cs-check:
    name: PHP CS-Fixer check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0
          coverage: none

      - name: Install dependencies
        uses: ramsey/composer-install@v2
        with:
          composer-options: --prefer-dist

      - name: Install PHP CS-Fixer
        run: composer bin cs-fixer install

      - name: Run PHP CS-Fixer check
        run: bin/tools/cs-fixer/vendor/friendsofphp/php-cs-fixer/php-cs-fixer fix --dry-run --diff

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0
          coverage: none

      - name: Install dependencies
        uses: ramsey/composer-install@v2
        with:
          composer-options: --prefer-dist

      - name: Install PHPStan
        run: composer bin phpstan install

      - name: Run static analysis
        run: bin/tools/phpstan/vendor/phpstan/phpstan/phpstan analyse

  test-docker-stack:
    name: CI with docker stack
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        php: ['8.0', '8.1', '8.2']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run test suite with docker
        run: |
          echo "PHP_VERSION=${{ matrix.php }}" > .env
          make validate

#  push_docker_images:
#    name: Push docker images after CI complete on main branch
#    needs: [tests, composer-validate, build-docs, cs-check, static-analysis, test-docker-stack]
#    runs-on: ubuntu-latest
#    if: ${{ github.event_name == 'push' && github.event.ref == 'refs/heads/1.x' }}
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      - run: |
#          echo "TOKEN: ${{ secrets.PACKAGE_PUSH_TOKEN }}" > token.txt
#
#      - uses: actions/upload-artifact@v3
#        with:
#          name: token
#          path: token.txt
#
#      - name: Login to ghcr.io
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io/zenstruck
#          username: token
#          password: ${{ secrets.PACKAGE_PUSH_TOKEN }}
#
#      - name: Build and push images
#        run: ./docker/build.sh push
#        env:
#          GITHUB_TOKEN: ${{ secrets.PACKAGE_PUSH_TOKEN }}
