<?php

declare(strict_types=1);

/*
 * This file is part of the zenstruck/foundry package.
 *
 * (c) Kevin Bond <kevinbond@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Zenstruck\Foundry\Tests\Integration\InMemory;

use Doctrine\ORM\EntityManagerInterface;
use PHPUnit\Framework\Attributes\Test;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Zenstruck\Foundry\InMemory\AsInMemoryTest;
use Zenstruck\Foundry\Test\Factories;
use Zenstruck\Foundry\Test\ResetDatabase;
use Zenstruck\Foundry\Tests\Fixture\Entity\Address\StandardAddress;
use Zenstruck\Foundry\Tests\Fixture\Entity\Category\StandardCategory;
use Zenstruck\Foundry\Tests\Fixture\Entity\Contact\StandardContact;
use Zenstruck\Foundry\Tests\Fixture\Factories\Entity\Address\StandardAddressFactory;
use Zenstruck\Foundry\Tests\Fixture\Factories\Entity\Category\StandardCategoryFactory;
use Zenstruck\Foundry\Tests\Fixture\Factories\Entity\Contact\StandardContactFactory;
use Zenstruck\Foundry\Tests\Fixture\InMemory\InMemoryStandardAddressRepository;
use Zenstruck\Foundry\Tests\Fixture\InMemory\InMemoryStandardContactRepository;
use Zenstruck\Foundry\Tests\Integration\RequiresORM;

#[AsInMemoryTest]
final class InMemoryTest extends KernelTestCase
{
    use Factories;
    use RequiresORM; // needed to use the entity manager
    use ResetDatabase;

    private InMemoryStandardAddressRepository $addressRepository;
    private InMemoryStandardContactRepository $contactRepository;

    private EntityManagerInterface $entityManager;

    protected function setUp(): void
    {
        $this->addressRepository = self::getContainer()->get(InMemoryStandardAddressRepository::class); // @phpstan-ignore assign.propertyType
        $this->contactRepository = self::getContainer()->get(InMemoryStandardContactRepository::class); // @phpstan-ignore assign.propertyType

        $this->entityManager = self::getContainer()->get(EntityManagerInterface::class); // @phpstan-ignore assign.propertyType
    }

    /**
     * @test
     */
    public function create_one_does_not_persist_in_database(): void
    {
        $address = StandardAddressFactory::createOne();
        self::assertInstanceOf(StandardAddress::class, $address);

        self::assertSame(0, $this->entityManager->getRepository(StandardAddress::class)->count([]));

        // id is autogenerated from the db, then it should be null
        self::assertNull($address->id);
    }

    /**
     * @test
     */
    public function create_many_does_not_persist_in_database(): void
    {
        $addresses = StandardAddressFactory::createMany(2);
        self::assertContainsOnlyInstancesOf(StandardAddress::class, $addresses);

        self::assertSame(0, $this->entityManager->getRepository(StandardAddress::class)->count([]));

        foreach ($addresses as $address) {
            // id is autogenerated from the db, then it should be null
            self::assertNull($address->id);
        }
    }

    /**
     * @test
     */
    public function object_should_be_accessible_from_in_memory_repository(): void
    {
        $address = StandardAddressFactory::createOne();

        self::assertSame([$address], $this->addressRepository->_all());
    }

    /**
     * @test
     */
    public function nested_objects_should_be_accessible_from_their_respective_repository(): void
    {
        $contact = StandardContactFactory::createOne();

        self::assertSame([$contact], $this->contactRepository->_all());
        self::assertSame([$contact->getAddress()], $this->addressRepository->_all());

        self::assertSame(0, $this->entityManager->getRepository(StandardAddress::class)->count([]));
        self::assertSame(0, $this->entityManager->getRepository(StandardContact::class)->count([]));
    }

    /**
     * @test
     */
    public function can_use_generic_repository(): void
    {
        $category = StandardCategoryFactory::createOne([
            'contacts' => StandardContactFactory::new()->many(2),
        ]);

        self::assertSame(0, $this->entityManager->getRepository(StandardCategory::class)->count([]));

        self::assertSame($this->contactRepository->_all(), $category->getContacts()->toArray());
    }
}
